Minimum Bottleneck Spanning Tree:
Kruscal

All-pairs vertexes' Minimum Bottleneck Path:
DP in the Kruscal's MST
O(n^2)*O(1)

Minimum Diameter Spanning Tree:
Kariv-Hakimi Algorithm

Directed MST:
Chuâ€“Liu/Edmonds' Algorithm

Second-best MST:
get All-pairs vertexes' Minimum Bottleneck Path, then enumerate all no-tree-edges to replace the longest edge between two vertexes to get a worse MST

Degree-constrained MST:
remove the vertex from the whole graph,then add edges to increase degrees and connect different connected components together ( O(mlogm + n) with kruscal )
if we can't connect all connected components together, there exists no any spanning tree
next step is add edges to root vertex greedily, increase degrees, and decrease our answer ( O(k*n) )
need all vertexes' minimum bottleneck path to root vertex

Minimum Ratio Spanning Tree:
Binary search

Manhattan MST:
combining line sweep with divide-and-conquer algorithm

Minimum Steiner Tree:
TODO
bit-mask with dijkstra/SPFA

Count Spanning Trees:
TODO
Matrix multiplication

k-best MST:
do like second-best MST for k times
